var searchIndex = JSON.parse('{\
"serious":{"doc":"Serious is a simple language to evaluate concise …","t":[14,0,0,0,13,3,4,13,13,13,11,11,11,11,12,11,12,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,6,5,5,13,13,13,13,3,4,13,13,13,4,13,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11],"n":["create_context","error","interpreter","parser","BadParse","Error","ErrorType","Overflow","UnboundIdentifier","UndefinedOperation","borrow","borrow","borrow_mut","borrow_mut","end","eq","error_type","fmt","fmt","from","from","into","into","message","new","start","try_from","try_from","try_into","try_into","type_id","type_id","Context","interpret","interpret_tree","Add","Constant","Divide","Exponentiate","Expression","ExpressionData","Identifier","Multiply","Op","Operation","Subtract","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","data","end","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","ne","ne","new_const","new_id","new_op","parse","start","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_bounds"],"q":["serious","","","","serious::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","serious::interpreter","","","serious::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Creates a serious::Context which can be applied to an …","Defines the type for expressions that fail to evaluate.","Evaluates an abstract syntax, given a context of bound …","Converts tokens into an abstract syntax tree.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A hashmap from identifiers to values which can be applied …","Evaluates a Serious expression.","Evaluates a pre-parsed Serious expression.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a Serious expression into an abstract syntax tree.","","","","","","","","","","","",""],"i":[0,0,0,0,1,0,0,1,1,1,1,2,1,2,2,1,2,1,2,1,2,1,2,2,2,2,1,2,1,2,1,2,0,0,0,3,4,3,3,0,0,4,3,4,0,3,3,4,5,3,4,5,3,3,5,5,3,4,5,3,4,5,3,4,5,3,4,5,4,5,5,5,5,0,5,3,3,4,5,3,4,5,3,4,5,5],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[["errortype",4]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["errortype",4],["usize",15],["string",3]],["error",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[["context",6],["str",15]],[["result",4],["f64",15],["error",3]]],[[["context",6],["expression",3]],[["result",4],["f64",15],["error",3]]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["operation",4]],[[]],null,null,[[["operation",4]],["bool",15]],[[["expressiondata",4]],["bool",15]],[[["expression",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["expressiondata",4]],["bool",15]],[[["expression",3]],["bool",15]],[[["f64",15],["usize",15]],["expression",3]],[[["usize",15],["char",15]],["expression",3]],[[["operation",4],["expression",3]],["expression",3]],[[["str",15]],[["expression",3],["error",3],["result",4]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["expression",3]]],"p":[[4,"ErrorType"],[3,"Error"],[4,"Operation"],[4,"ExpressionData"],[3,"Expression"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};