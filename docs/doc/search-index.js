var searchIndex = JSON.parse('{\
"serious":{"doc":"Serious is a simple language for concise mathematical …","t":[14,0,0,0,13,3,4,13,13,13,11,11,11,11,12,11,11,12,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,6,5,5,13,13,13,13,3,4,13,13,13,4,13,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11],"n":["create_context","error","interpreter","parser","BadParse","Error","ErrorType","Overflow","UnboundIdentifier","UndefinedOperation","borrow","borrow","borrow_mut","borrow_mut","end","eq","eq","error_type","fmt","fmt","from","from","into","into","message","ne","new","start","try_from","try_from","try_into","try_into","type_id","type_id","Context","interpret","interpret_tree","Add","Constant","Divide","Exponentiate","Expression","ExpressionData","Identifier","Multiply","Op","Operation","Subtract","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","data","end","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","ne","ne","new_const","new_id","new_op","parse","start","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_bounds"],"q":["serious","","","","serious::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serious::interpreter","","","serious::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Creates a <code>Context</code> which can be applied to an expression …","Defines the type for [<code>Result::Err</code>]s of <code>parse</code>, <code>interpret</code>, …","Evaluates an <code>Expression</code>, given a <code>Context</code> of bound …","Converts text into an <code>Expression</code> (an abstract syntax …","Returned by <code>parse</code>/<code>interpret</code> at unexpected tokens or …","Defines the type for [<code>Result::Err</code>]s of <code>parse</code>, <code>interpret</code>, …","Categories for the errors from [<code>Result::Err</code>]s of <code>parse</code>, …","Returned by <code>parse</code>/<code>interpret</code> if a literal constant is too …","Returned by <code>interpret</code>/<code>interpret_tree</code> if an <code>Identifier</code> is …","Returned by <code>interpret</code>/<code>interpret_tree</code> if an <code>Operation</code> …","","","","","","","","","","","","","","","","","","","","","","","","","A hashmap from identifiers to values which can be applied …","Evaluates a Serious expression.","Evaluates a pre-parsed Serious expression.","Defined by the arithmetic operator <code>+</code> over [<code>f64</code>].","A literal constant.","Defined by the arithmetic operator <code>/</code> over [<code>f64</code>].","Defined by [f64::powf].","The output of a successful parse; contains …","The semantic content of an expression.","A named identifier.","Defined by the arithmetic operator <code>*</code> over [<code>f64</code>].","A binary operation. In the case of unary minus, the …","The operations in the Serious language.","Defined by the arithmetic operator <code>-</code> over [<code>f64</code>].","","","","","","","","","The semantic content of the expression.","The end of the expression in the original text.","","","","","","","","","","","","","","","Create an expression for a constant literal.","Create an expression for an identifier.","Create an expression given an operation and its two …","Parses a Serious expression into an abstract syntax tree.","The start of the expression in the original text.","","","","","","","","","","","Re-assign the <code>start</code> and <code>end</code> positions of an expression. …"],"i":[0,0,0,0,1,0,0,1,1,1,1,2,1,2,2,1,2,2,1,2,1,2,1,2,2,2,2,2,1,2,1,2,1,2,0,0,0,3,4,3,3,0,0,4,3,4,0,3,3,4,5,3,4,5,3,3,5,5,3,4,5,3,4,5,3,4,5,3,4,5,4,5,5,5,5,0,5,3,3,4,5,3,4,5,3,4,5,5],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,[[["errortype",4]],["bool",15]],[[["error",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],null,[[["error",3]],["bool",15]],[[["errortype",4],["usize",15],["string",3]],["error",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[["context",6],["str",15]],[["result",4],["f64",15],["error",3]]],[[["expression",3],["context",6]],[["result",4],["f64",15],["error",3]]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["operation",4]],[[]],null,null,[[["operation",4]],["bool",15]],[[["expressiondata",4]],["bool",15]],[[["expression",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["expressiondata",4]],["bool",15]],[[["expression",3]],["bool",15]],[[["f64",15],["usize",15]],["expression",3]],[[["usize",15],["char",15]],["expression",3]],[[["expression",3],["operation",4]],["expression",3]],[[["str",15]],[["result",4],["expression",3],["error",3]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["usize",15]],["expression",3]]],"p":[[4,"ErrorType"],[3,"Error"],[4,"Operation"],[4,"ExpressionData"],[3,"Expression"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};